#pragma once
#include <cstdint>
#include <vector>

namespace data {

	/* ROW MAJOR ORDER,
*
* a1 (square 0) -> b1 (square 1) -> c1 (square 2) -> ... -> h1 (square 7)
a2 (square 8) -> b2 (square 9) -> c2 (square 10) -> ... -> h2 (square 15)
...
a8 (square 56) -> b8 (square 57) -> c8 (square 58) -> ... -> h8 (square 63)

*/


	namespace masks {

		static enum rank {
			RANK_1 = 0,
			RANK_2 = 1,
			RANK_3 = 2,
			RANK_4 = 3,
			RANK_5 = 4,
			RANK_6 = 5,
			RANK_7 = 6,
			RANK_8 = 7
		};

		static enum file {
			FILE_1 = 0,
			FILE_2 = 1,
			FILE_3 = 2,
			FILE_4 = 3,
			FILE_5 = 4,
			FILE_6 = 5,
			FILE_7 = 6,
			FILE_8 = 7
		};

		constexpr std::uint64_t rankMask[8] = {
			0b0000000000000000000000000000000000000000000000000000000011111111,
			0b0000000000000000000000000000000000000000000000001111111100000000,
			0b0000000000000000000000000000000000000000111111110000000000000000,
			0b0000000000000000000000000000000011111111000000000000000000000000,
			0b0000000000000000000000001111111100000000000000000000000000000000,
			0b0000000000000000111111110000000000000000000000000000000000000000,
			0b0000000011111111000000000000000000000000000000000000000000000000,
			0b1111111100000000000000000000000000000000000000000000000000000000,
		};

		constexpr std::uint64_t fileMask[8] = {
			0b0000000100000001000000010000000100000001000000010000000100000001,
			0b0000001000000010000000100000001000000010000000100000001000000010,
			0b0000010000000100000001000000010000000100000001000000010000000100,
			0b0000100000001000000010000000100000001000000010000000100000001000,
			0b0001000000010000000100000001000000010000000100000001000000010000,
			0b0010000000100000001000000010000000100000001000000010000000100000,
			0b0100000001000000010000000100000001000000010000000100000001000000,
			0b1000000010000000100000001000000010000000100000001000000010000000,
		};
		
		constexpr std::uint64_t rookBlockerMask[64] = {
			0b0000000000000001000000010000000100000001000000010000000101111110,
			0b0000000000000010000000100000001000000010000000100000001001111100,
			0b0000000000000100000001000000010000000100000001000000010001111010,
			0b0000000000001000000010000000100000001000000010000000100001110110,
			0b0000000000010000000100000001000000010000000100000001000001101110,
			0b0000000000100000001000000010000000100000001000000010000001011110,
			0b0000000001000000010000000100000001000000010000000100000000111110,
			0b0000000010000000100000001000000010000000100000001000000001111110,
			0b0000000000000001000000010000000100000001000000010111111000000000,
			0b0000000000000010000000100000001000000010000000100111110000000000,
			0b0000000000000100000001000000010000000100000001000111101000000000,
			0b0000000000001000000010000000100000001000000010000111011000000000,
			0b0000000000010000000100000001000000010000000100000110111000000000,
			0b0000000000100000001000000010000000100000001000000101111000000000,
			0b0000000001000000010000000100000001000000010000000011111000000000,
			0b0000000010000000100000001000000010000000100000000111111000000000,
			0b0000000000000001000000010000000100000001011111100000000100000000,
			0b0000000000000010000000100000001000000010011111000000001000000000,
			0b0000000000000100000001000000010000000100011110100000010000000000,
			0b0000000000001000000010000000100000001000011101100000100000000000,
			0b0000000000010000000100000001000000010000011011100001000000000000,
			0b0000000000100000001000000010000000100000010111100010000000000000,
			0b0000000001000000010000000100000001000000001111100100000000000000,
			0b0000000010000000100000001000000010000000011111101000000000000000,
			0b0000000000000001000000010000000101111110000000010000000100000000,
			0b0000000000000010000000100000001001111100000000100000001000000000,
			0b0000000000000100000001000000010001111010000001000000010000000000,
			0b0000000000001000000010000000100001110110000010000000100000000000,
			0b0000000000010000000100000001000001101110000100000001000000000000,
			0b0000000000100000001000000010000001011110001000000010000000000000,
			0b0000000001000000010000000100000000111110010000000100000000000000,
			0b0000000010000000100000001000000001111110100000001000000000000000,
			0b0000000000000001000000010111111000000001000000010000000100000000,
			0b0000000000000010000000100111110000000010000000100000001000000000,
			0b0000000000000100000001000111101000000100000001000000010000000000,
			0b0000000000001000000010000111011000001000000010000000100000000000,
			0b0000000000010000000100000110111000010000000100000001000000000000,
			0b0000000000100000001000000101111000100000001000000010000000000000,
			0b0000000001000000010000000011111001000000010000000100000000000000,
			0b0000000010000000100000000111111010000000100000001000000000000000,
			0b0000000000000001011111100000000100000001000000010000000100000000,
			0b0000000000000010011111000000001000000010000000100000001000000000,
			0b0000000000000100011110100000010000000100000001000000010000000000,
			0b0000000000001000011101100000100000001000000010000000100000000000,
			0b0000000000010000011011100001000000010000000100000001000000000000,
			0b0000000000100000010111100010000000100000001000000010000000000000,
			0b0000000001000000001111100100000001000000010000000100000000000000,
			0b0000000010000000011111101000000010000000100000001000000000000000,
			0b0000000001111110000000010000000100000001000000010000000100000000,
			0b0000000001111100000000100000001000000010000000100000001000000000,
			0b0000000001111010000001000000010000000100000001000000010000000000,
			0b0000000001110110000010000000100000001000000010000000100000000000,
			0b0000000001101110000100000001000000010000000100000001000000000000,
			0b0000000001011110001000000010000000100000001000000010000000000000,
			0b0000000000111110010000000100000001000000010000000100000000000000,
			0b0000000001111110100000001000000010000000100000001000000000000000,
			0b0111111000000001000000010000000100000001000000010000000100000000,
			0b0111110000000010000000100000001000000010000000100000001000000000,
			0b0111101000000100000001000000010000000100000001000000010000000000,
			0b0111011000001000000010000000100000001000000010000000100000000000,
			0b0110111000010000000100000001000000010000000100000001000000000000,
			0b0101111000100000001000000010000000100000001000000010000000000000,
			0b0011111001000000010000000100000001000000010000000100000000000000,
			0b0111111010000000100000001000000010000000100000001000000000000000
		};

		constexpr std::uint64_t bishopBlockerMask[64] = {
			0b0000000001000000001000000001000000001000000001000000001000000000,
			0b0000000000000000010000000010000000010000000010000000010000000000,
			0b0000000000000000000000000100000000100000000100000000101000000000,
			0b0000000000000000000000000000000001000000001000100001010000000000,
			0b0000000000000000000000000000000000000010010001000010100000000000,
			0b0000000000000000000000000000001000000100000010000101000000000000,
			0b0000000000000000000000100000010000001000000100000010000000000000,
			0b0000000000000010000001000000100000010000001000000100000000000000,
			0b0000000000100000000100000000100000000100000000100000000000000000,
			0b0000000001000000001000000001000000001000000001000000000000000000,
			0b0000000000000000010000000010000000010000000010100000000000000000,
			0b0000000000000000000000000100000000100010000101000000000000000000,
			0b0000000000000000000000000000001001000100001010000000000000000000,
			0b0000000000000000000000100000010000001000010100000000000000000000,
			0b0000000000000010000001000000100000010000001000000000000000000000,
			0b0000000000000100000010000001000000100000010000000000000000000000,
			0b0000000000010000000010000000010000000010000000000000001000000000,
			0b0000000000100000000100000000100000000100000000000000010000000000,
			0b0000000001000000001000000001000000001010000000000000101000000000,
			0b0000000000000000010000000010001000010100000000000001010000000000,
			0b0000000000000000000000100100010000101000000000000010100000000000,
			0b0000000000000010000001000000100001010000000000000101000000000000,
			0b0000000000000100000010000001000000100000000000000010000000000000,
			0b0000000000001000000100000010000001000000000000000100000000000000,
			0b0000000000001000000001000000001000000000000000100000010000000000,
			0b0000000000010000000010000000010000000000000001000000100000000000,
			0b0000000000100000000100000000101000000000000010100001000000000000,
			0b0000000001000000001000100001010000000000000101000010001000000000,
			0b0000000000000010010001000010100000000000001010000100010000000000,
			0b0000000000000100000010000101000000000000010100000000100000000000,
			0b0000000000001000000100000010000000000000001000000001000000000000,
			0b0000000000010000001000000100000000000000010000000010000000000000,
			0b0000000000000100000000100000000000000010000001000000100000000000,
			0b0000000000001000000001000000000000000100000010000001000000000000,
			0b0000000000010000000010100000000000001010000100000010000000000000,
			0b0000000000100010000101000000000000010100001000100100000000000000,
			0b0000000001000100001010000000000000101000010001000000001000000000,
			0b0000000000001000010100000000000001010000000010000000010000000000,
			0b0000000000010000001000000000000000100000000100000000100000000000,
			0b0000000000100000010000000000000001000000001000000001000000000000,
			0b0000000000000010000000000000001000000100000010000001000000000000,
			0b0000000000000100000000000000010000001000000100000010000000000000,
			0b0000000000001010000000000000101000010000001000000100000000000000,
			0b0000000000010100000000000001010000100010010000000000000000000000,
			0b0000000000101000000000000010100001000100000000100000000000000000,
			0b0000000001010000000000000101000000001000000001000000001000000000,
			0b0000000000100000000000000010000000010000000010000000010000000000,
			0b0000000001000000000000000100000000100000000100000000100000000000,
			0b0000000000000000000000100000010000001000000100000010000000000000,
			0b0000000000000000000001000000100000010000001000000100000000000000,
			0b0000000000000000000010100001000000100000010000000000000000000000,
			0b0000000000000000000101000010001001000000000000000000000000000000,
			0b0000000000000000001010000100010000000010000000000000000000000000,
			0b0000000000000000010100000000100000000100000000100000000000000000,
			0b0000000000000000001000000001000000001000000001000000001000000000,
			0b0000000000000000010000000010000000010000000010000000010000000000,
			0b0000000000000010000001000000100000010000001000000100000000000000,
			0b0000000000000100000010000001000000100000010000000000000000000000,
			0b0000000000001010000100000010000001000000000000000000000000000000,
			0b0000000000010100001000100100000000000000000000000000000000000000,
			0b0000000000101000010001000000001000000000000000000000000000000000,
			0b0000000001010000000010000000010000000010000000000000000000000000,
			0b0000000000100000000100000000100000000100000000100000000000000000,
			0b0000000001000000001000000001000000001000000001000000001000000000
		};
	};

	namespace magicbitboards {
		constexpr std::uint64_t rooktMagicNumbers[64] = {
			0xab6ffa9041fb2a81,
			0xdc19ebb38e27d242,
			0x61c8fdd8b26f5f64,
			0x3c46b425304f8a82,
			0xde916e6b2081face,
			0x45d71abf0228e28f,
			0xe72d2ceef3ad89e8,
			0xcd1b9583890432bd,
			0xa7d7c18317771413,
			0x90935a9fe4afeaff,
			0x96b23b272bdca023,
			0x1f66c973d28aa7bc,
			0x41f00136aa15d500,
			0x9c8f6e89df6e9318,
			0xf4bfeb088403613c,
			0xde457534855c5be7,
			0x7a6e72137b82572e,
			0xe14a352874851a46,
			0xd1d4fcf3f4131e81,
			0x8df953759e44c1ca,
			0x7133fa00031a01b4,
			0xe88ee5e813a14a18,
			0x791823ffd7d476ce,
			0x0d406552ee43b7f7,
			0xbc45745ff92cef9f,
			0x63233392bb79aa84,
			0x6a541a626107cfc1,
			0xc769af987c15d87c,
			0x7286d6c0ed7c8f53,
			0xe128ed248f93704c,
			0x6458f620fbf91a19,
			0x1fd8769d1a5b2519,
			0x102668b65590e0c8,
			0x7a5a9c47edb54503,
			0x7e661069ed9bf481,
			0xccfc05949827d7eb,
			0x2c7f0417946382d6,
			0x3b5736ad5a2af5d5,
			0x74e53d00a3200f90,
			0x4e46367e3b4400b5,
			0xfdb4a97055f3b796,
			0x9e347b590f2a712e,
			0x2c83cf5fbb5ecfff,
			0x6601010761f7cb3d,
			0x1a5f129c4fec50a6,
			0x0ecb75ce6deebb47,
			0x1b4b1ab08cdcaab1,
			0x6213952c04937839,
			0x1ee67a2fe4c77306,
			0xafc8d16203a22030,
			0x5f9284709822c8d4,
			0xadb03297a4341b88,
			0x02ed5a78ea5cafff,
			0x41474b986181509c,
			0x7556207dfdc4fff0,
			0xdc0f27cfd1673ed0,
			0x3cf1bcfa67745c76,
			0x801766678d8f0fce,
			0xf23b506e40e70d32,
			0x8cb2c177768e1126,
			0x83c723f235e70ae2,
			0xbc3a7fedeecf67b3,
			0xa8f6e84d04ddbd4c,
			0x969801322a6d8b0e
		};
		constexpr std::uint64_t rooktMagicKeyShift[64] = {
			0x0000000000000032,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000032,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000032,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000032,

		};
		constexpr std::uint64_t rooktFlatternedIndices[64] = {
			0x0000000000000000,
			0x0000000000004000,
			0x0000000000006000,
			0x0000000000008000,
			0x000000000000a000,
			0x000000000000c000,
			0x000000000000e000,
			0x0000000000010000,
			0x0000000000014000,
			0x0000000000016000,
			0x0000000000016800,
			0x0000000000017000,
			0x0000000000017800,
			0x0000000000018000,
			0x0000000000018800,
			0x0000000000019000,
			0x000000000001b000,
			0x000000000001d000,
			0x000000000001d800,
			0x000000000001e000,
			0x000000000001e800,
			0x000000000001f000,
			0x000000000001f800,
			0x0000000000020000,
			0x0000000000022000,
			0x0000000000024000,
			0x0000000000024800,
			0x0000000000025000,
			0x0000000000025800,
			0x0000000000026000,
			0x0000000000026800,
			0x0000000000027000,
			0x0000000000029000,
			0x000000000002b000,
			0x000000000002b800,
			0x000000000002c000,
			0x000000000002c800,
			0x000000000002d000,
			0x000000000002d800,
			0x000000000002e000,
			0x0000000000030000,
			0x0000000000032000,
			0x0000000000032800,
			0x0000000000033000,
			0x0000000000033800,
			0x0000000000034000,
			0x0000000000034800,
			0x0000000000035000,
			0x0000000000037000,
			0x0000000000039000,
			0x0000000000039800,
			0x000000000003a000,
			0x000000000003a800,
			0x000000000003b000,
			0x000000000003b800,
			0x000000000003c000,
			0x000000000003e000,
			0x0000000000042000,
			0x0000000000044000,
			0x0000000000046000,
			0x0000000000048000,
			0x000000000004a000,
			0x000000000004c000,
			0x000000000004e000
		};


		constexpr std::uint64_t bishoptMagicNumbers[64] = {
			0x3c700ed7f7fa8200,
			0x21a03b6397a3fd08,
			0xce6c082e810d9abc,
			0x14d4240391da785a,
			0x1e545040d000ee27,
			0x7ef8a2955470efd9,
			0x72976432e77fd8e0,
			0xf9c52b8f7b81f81b,
			0xc0c1aa5a7acf6fe5,
			0x9df8ac9ad6c53beb,
			0x630d302c2b85249a,
			0x8f3cac3c12824067,
			0x1446f423064e52ad,
			0x6f7dd202b0aad054,
			0x350abcbb6856970f,
			0xfa97c4ac02581359,
			0xb844e85cfb642fd2,
			0x87900c643028a913,
			0x1392e5da26363842,
			0x5a561b638928f651,
			0x54d649afbbef6955,
			0xd503819471c1dba8,
			0x1b2e84bc49c7bf6e,
			0x1afd04f752b5df9d,
			0x45a085a59f381666,
			0xbcd79b6a784fb566,
			0x080aeb9741f46c67,
			0x63f08d19e9effb97,
			0x6e04af1097241946,
			0x7493316e983c2bad,
			0xe722c2a41b040f7b,
			0x146913c741e41402,
			0x2bb4a018474e0f7c,
			0x93d9903447301c03,
			0x2f1c028a2e7970aa,
			0x5f7cad097b8b4326,
			0x5ef60f3037feaa20,
			0x139d0983a1465d42,
			0x30900a9782cd0440,
			0x9bd9e11200afc1f3,
			0xb73ff00260239478,
			0xde09cc0c2c75209e,
			0x3b4b6f6bb6f4a398,
			0x024f640c005be344,
			0x832649d27228144f,
			0x36cb18d440ef6a10,
			0xb8166ad140527e82,
			0x425c0f87ae04b301,
			0xfc3ffdc98f2c1d57,
			0x815ffba6eb505ebf,
			0x8d9840e984302e20,
			0xc171edbcc1108a2b,
			0x973eb4f15e7886de,
			0xddf9ff0d0481a4f9,
			0x02ff17afa93aa088,
			0xf8ac3f8696b577fe,
			0xbbc3ff99c72611fd,
			0xb2a70d751135cb3f,
			0xeed5ec258c048812,
			0x4540bd680161880f,
			0x313e5c84a890ac07,
			0xf9f2637fcef4d621,
			0x4660ff907444cec4,
			0x280105701df138b4
		};
		
		constexpr std::uint64_t bishopMagicKeyShift[64] = {
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x0000000000000038,
			0x0000000000000038,
			0x0000000000000038,
			0x0000000000000038,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x0000000000000038,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000038,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x0000000000000038,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000038,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x0000000000000038,
			0x0000000000000038,
			0x0000000000000038,
			0x0000000000000038,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a
		};
		
		constexpr std::uint64_t bishopFlatternedIndices[64] = {
		0x0000000000000000,
		0x0000000000000040,
		0x0000000000000060,
		0x0000000000000080,
		0x00000000000000a0,
		0x00000000000000c0,
		0x00000000000000e0,
		0x0000000000000100,
		0x0000000000000140,
		0x0000000000000160,
		0x0000000000000180,
		0x00000000000001a0,
		0x00000000000001c0,
		0x00000000000001e0,
		0x0000000000000200,
		0x0000000000000220,
		0x0000000000000240,
		0x0000000000000260,
		0x0000000000000280,
		0x0000000000000380,
		0x0000000000000480,
		0x0000000000000580,
		0x0000000000000680,
		0x00000000000006a0,
		0x00000000000006c0,
		0x00000000000006e0,
		0x0000000000000700,
		0x0000000000000800,
		0x0000000000001000,
		0x0000000000001800,
		0x0000000000001900,
		0x0000000000001920,
		0x0000000000001940,
		0x0000000000001960,
		0x0000000000001980,
		0x0000000000001a80,
		0x0000000000002280,
		0x0000000000002a80,
		0x0000000000002b80,
		0x0000000000002ba0,
		0x0000000000002bc0,
		0x0000000000002be0,
		0x0000000000002c00,
		0x0000000000002d00,
		0x0000000000002e00,
		0x0000000000002f00,
		0x0000000000003000,
		0x0000000000003020,
		0x0000000000003040,
		0x0000000000003060,
		0x0000000000003080,
		0x00000000000030a0,
		0x00000000000030c0,
		0x00000000000030e0,
		0x0000000000003100,
		0x0000000000003120,
		0x0000000000003140,
		0x0000000000003180,
		0x00000000000031a0,
		0x00000000000031c0,
		0x00000000000031e0,
		0x0000000000003200,
		0x0000000000003220,
		0x0000000000003240
		};
	}

}