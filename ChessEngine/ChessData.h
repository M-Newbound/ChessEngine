#pragma once
#include <cstdint>
#include <vector>

namespace data {

	/* ROW MAJOR ORDER,
*
* a1 (square 0) -> b1 (square 1) -> c1 (square 2) -> ... -> h1 (square 7)
a2 (square 8) -> b2 (square 9) -> c2 (square 10) -> ... -> h2 (square 15)
...
a8 (square 56) -> b8 (square 57) -> c8 (square 58) -> ... -> h8 (square 63)

*/


	namespace masks {

		static enum rank {
			RANK_1 = 0,
			RANK_2 = 1,
			RANK_3 = 2,
			RANK_4 = 3,
			RANK_5 = 4,
			RANK_6 = 5,
			RANK_7 = 6,
			RANK_8 = 7
		};

		static enum file {
			FILE_1 = 0,
			FILE_2 = 1,
			FILE_3 = 2,
			FILE_4 = 3,
			FILE_5 = 4,
			FILE_6 = 5,
			FILE_7 = 6,
			FILE_8 = 7
		};

		constexpr std::uint64_t rankMask[8] = {
			0b0000000000000000000000000000000000000000000000000000000011111111,
			0b0000000000000000000000000000000000000000000000001111111100000000,
			0b0000000000000000000000000000000000000000111111110000000000000000,
			0b0000000000000000000000000000000011111111000000000000000000000000,
			0b0000000000000000000000001111111100000000000000000000000000000000,
			0b0000000000000000111111110000000000000000000000000000000000000000,
			0b0000000011111111000000000000000000000000000000000000000000000000,
			0b1111111100000000000000000000000000000000000000000000000000000000,
		};

		constexpr std::uint64_t fileMask[8] = {
			0b0000000100000001000000010000000100000001000000010000000100000001,
			0b0000001000000010000000100000001000000010000000100000001000000010,
			0b0000010000000100000001000000010000000100000001000000010000000100,
			0b0000100000001000000010000000100000001000000010000000100000001000,
			0b0001000000010000000100000001000000010000000100000001000000010000,
			0b0010000000100000001000000010000000100000001000000010000000100000,
			0b0100000001000000010000000100000001000000010000000100000001000000,
			0b1000000010000000100000001000000010000000100000001000000010000000,
		};
		
		constexpr std::uint64_t rookBlockerMask[64] = {
			0b0000000000000001000000010000000100000001000000010000000101111110,
			0b0000000000000010000000100000001000000010000000100000001001111100,
			0b0000000000000100000001000000010000000100000001000000010001111010,
			0b0000000000001000000010000000100000001000000010000000100001110110,
			0b0000000000010000000100000001000000010000000100000001000001101110,
			0b0000000000100000001000000010000000100000001000000010000001011110,
			0b0000000001000000010000000100000001000000010000000100000000111110,
			0b0000000010000000100000001000000010000000100000001000000001111110,
			0b0000000000000001000000010000000100000001000000010111111000000000,
			0b0000000000000010000000100000001000000010000000100111110000000000,
			0b0000000000000100000001000000010000000100000001000111101000000000,
			0b0000000000001000000010000000100000001000000010000111011000000000,
			0b0000000000010000000100000001000000010000000100000110111000000000,
			0b0000000000100000001000000010000000100000001000000101111000000000,
			0b0000000001000000010000000100000001000000010000000011111000000000,
			0b0000000010000000100000001000000010000000100000000111111000000000,
			0b0000000000000001000000010000000100000001011111100000000100000000,
			0b0000000000000010000000100000001000000010011111000000001000000000,
			0b0000000000000100000001000000010000000100011110100000010000000000,
			0b0000000000001000000010000000100000001000011101100000100000000000,
			0b0000000000010000000100000001000000010000011011100001000000000000,
			0b0000000000100000001000000010000000100000010111100010000000000000,
			0b0000000001000000010000000100000001000000001111100100000000000000,
			0b0000000010000000100000001000000010000000011111101000000000000000,
			0b0000000000000001000000010000000101111110000000010000000100000000,
			0b0000000000000010000000100000001001111100000000100000001000000000,
			0b0000000000000100000001000000010001111010000001000000010000000000,
			0b0000000000001000000010000000100001110110000010000000100000000000,
			0b0000000000010000000100000001000001101110000100000001000000000000,
			0b0000000000100000001000000010000001011110001000000010000000000000,
			0b0000000001000000010000000100000000111110010000000100000000000000,
			0b0000000010000000100000001000000001111110100000001000000000000000,
			0b0000000000000001000000010111111000000001000000010000000100000000,
			0b0000000000000010000000100111110000000010000000100000001000000000,
			0b0000000000000100000001000111101000000100000001000000010000000000,
			0b0000000000001000000010000111011000001000000010000000100000000000,
			0b0000000000010000000100000110111000010000000100000001000000000000,
			0b0000000000100000001000000101111000100000001000000010000000000000,
			0b0000000001000000010000000011111001000000010000000100000000000000,
			0b0000000010000000100000000111111010000000100000001000000000000000,
			0b0000000000000001011111100000000100000001000000010000000100000000,
			0b0000000000000010011111000000001000000010000000100000001000000000,
			0b0000000000000100011110100000010000000100000001000000010000000000,
			0b0000000000001000011101100000100000001000000010000000100000000000,
			0b0000000000010000011011100001000000010000000100000001000000000000,
			0b0000000000100000010111100010000000100000001000000010000000000000,
			0b0000000001000000001111100100000001000000010000000100000000000000,
			0b0000000010000000011111101000000010000000100000001000000000000000,
			0b0000000001111110000000010000000100000001000000010000000100000000,
			0b0000000001111100000000100000001000000010000000100000001000000000,
			0b0000000001111010000001000000010000000100000001000000010000000000,
			0b0000000001110110000010000000100000001000000010000000100000000000,
			0b0000000001101110000100000001000000010000000100000001000000000000,
			0b0000000001011110001000000010000000100000001000000010000000000000,
			0b0000000000111110010000000100000001000000010000000100000000000000,
			0b0000000001111110100000001000000010000000100000001000000000000000,
			0b0111111000000001000000010000000100000001000000010000000100000000,
			0b0111110000000010000000100000001000000010000000100000001000000000,
			0b0111101000000100000001000000010000000100000001000000010000000000,
			0b0111011000001000000010000000100000001000000010000000100000000000,
			0b0110111000010000000100000001000000010000000100000001000000000000,
			0b0101111000100000001000000010000000100000001000000010000000000000,
			0b0011111001000000010000000100000001000000010000000100000000000000,
			0b0111111010000000100000001000000010000000100000001000000000000000
		};

		constexpr std::uint64_t bishopBlockerMask[64] = {
			0b0000000001000000001000000001000000001000000001000000001000000000,
			0b0000000000000000010000000010000000010000000010000000010000000000,
			0b0000000000000000000000000100000000100000000100000000101000000000,
			0b0000000000000000000000000000000001000000001000100001010000000000,
			0b0000000000000000000000000000000000000010010001000010100000000000,
			0b0000000000000000000000000000001000000100000010000101000000000000,
			0b0000000000000000000000100000010000001000000100000010000000000000,
			0b0000000000000010000001000000100000010000001000000100000000000000,
			0b0000000000100000000100000000100000000100000000100000000000000000,
			0b0000000001000000001000000001000000001000000001000000000000000000,
			0b0000000000000000010000000010000000010000000010100000000000000000,
			0b0000000000000000000000000100000000100010000101000000000000000000,
			0b0000000000000000000000000000001001000100001010000000000000000000,
			0b0000000000000000000000100000010000001000010100000000000000000000,
			0b0000000000000010000001000000100000010000001000000000000000000000,
			0b0000000000000100000010000001000000100000010000000000000000000000,
			0b0000000000010000000010000000010000000010000000000000001000000000,
			0b0000000000100000000100000000100000000100000000000000010000000000,
			0b0000000001000000001000000001000000001010000000000000101000000000,
			0b0000000000000000010000000010001000010100000000000001010000000000,
			0b0000000000000000000000100100010000101000000000000010100000000000,
			0b0000000000000010000001000000100001010000000000000101000000000000,
			0b0000000000000100000010000001000000100000000000000010000000000000,
			0b0000000000001000000100000010000001000000000000000100000000000000,
			0b0000000000001000000001000000001000000000000000100000010000000000,
			0b0000000000010000000010000000010000000000000001000000100000000000,
			0b0000000000100000000100000000101000000000000010100001000000000000,
			0b0000000001000000001000100001010000000000000101000010001000000000,
			0b0000000000000010010001000010100000000000001010000100010000000000,
			0b0000000000000100000010000101000000000000010100000000100000000000,
			0b0000000000001000000100000010000000000000001000000001000000000000,
			0b0000000000010000001000000100000000000000010000000010000000000000,
			0b0000000000000100000000100000000000000010000001000000100000000000,
			0b0000000000001000000001000000000000000100000010000001000000000000,
			0b0000000000010000000010100000000000001010000100000010000000000000,
			0b0000000000100010000101000000000000010100001000100100000000000000,
			0b0000000001000100001010000000000000101000010001000000001000000000,
			0b0000000000001000010100000000000001010000000010000000010000000000,
			0b0000000000010000001000000000000000100000000100000000100000000000,
			0b0000000000100000010000000000000001000000001000000001000000000000,
			0b0000000000000010000000000000001000000100000010000001000000000000,
			0b0000000000000100000000000000010000001000000100000010000000000000,
			0b0000000000001010000000000000101000010000001000000100000000000000,
			0b0000000000010100000000000001010000100010010000000000000000000000,
			0b0000000000101000000000000010100001000100000000100000000000000000,
			0b0000000001010000000000000101000000001000000001000000001000000000,
			0b0000000000100000000000000010000000010000000010000000010000000000,
			0b0000000001000000000000000100000000100000000100000000100000000000,
			0b0000000000000000000000100000010000001000000100000010000000000000,
			0b0000000000000000000001000000100000010000001000000100000000000000,
			0b0000000000000000000010100001000000100000010000000000000000000000,
			0b0000000000000000000101000010001001000000000000000000000000000000,
			0b0000000000000000001010000100010000000010000000000000000000000000,
			0b0000000000000000010100000000100000000100000000100000000000000000,
			0b0000000000000000001000000001000000001000000001000000001000000000,
			0b0000000000000000010000000010000000010000000010000000010000000000,
			0b0000000000000010000001000000100000010000001000000100000000000000,
			0b0000000000000100000010000001000000100000010000000000000000000000,
			0b0000000000001010000100000010000001000000000000000000000000000000,
			0b0000000000010100001000100100000000000000000000000000000000000000,
			0b0000000000101000010001000000001000000000000000000000000000000000,
			0b0000000001010000000010000000010000000010000000000000000000000000,
			0b0000000000100000000100000000100000000100000000100000000000000000,
			0b0000000001000000001000000001000000001000000001000000001000000000
		};
	};

	namespace magicbitboards {
		constexpr std::uint64_t rooktMagicNumbers[64] = {
			0xab6ffa9041fb2a81,
			0xdc19ebb38e27d242,
			0x61c8fdd8b26f5f64,
			0x3c46b425304f8a82,
			0xde916e6b2081face,
			0x45d71abf0228e28f,
			0xe72d2ceef3ad89e8,
			0xcd1b9583890432bd,
			0xa7d7c18317771413,
			0x90935a9fe4afeaff,
			0x96b23b272bdca023,
			0x1f66c973d28aa7bc,
			0x41f00136aa15d500,
			0x9c8f6e89df6e9318,
			0xf4bfeb088403613c,
			0xde457534855c5be7,
			0x7a6e72137b82572e,
			0xe14a352874851a46,
			0xd1d4fcf3f4131e81,
			0x8df953759e44c1ca,
			0x7133fa00031a01b4,
			0xe88ee5e813a14a18,
			0x791823ffd7d476ce,
			0x0d406552ee43b7f7,
			0xbc45745ff92cef9f,
			0x63233392bb79aa84,
			0x6a541a626107cfc1,
			0xc769af987c15d87c,
			0x7286d6c0ed7c8f53,
			0xe128ed248f93704c,
			0x6458f620fbf91a19,
			0x1fd8769d1a5b2519,
			0x102668b65590e0c8,
			0x7a5a9c47edb54503,
			0x7e661069ed9bf481,
			0xccfc05949827d7eb,
			0x2c7f0417946382d6,
			0x3b5736ad5a2af5d5,
			0x74e53d00a3200f90,
			0x4e46367e3b4400b5,
			0xfdb4a97055f3b796,
			0x9e347b590f2a712e,
			0x2c83cf5fbb5ecfff,
			0x6601010761f7cb3d,
			0x1a5f129c4fec50a6,
			0x0ecb75ce6deebb47,
			0x1b4b1ab08cdcaab1,
			0x6213952c04937839,
			0x1ee67a2fe4c77306,
			0xafc8d16203a22030,
			0x5f9284709822c8d4,
			0xadb03297a4341b88,
			0x02ed5a78ea5cafff,
			0x41474b986181509c,
			0x7556207dfdc4fff0,
			0xdc0f27cfd1673ed0,
			0x3cf1bcfa67745c76,
			0x801766678d8f0fce,
			0xf23b506e40e70d32,
			0x8cb2c177768e1126,
			0x83c723f235e70ae2,
			0xbc3a7fedeecf67b3,
			0xa8f6e84d04ddbd4c,
			0x969801322a6d8b0e
		};
		constexpr std::uint64_t rooktMagicKeyShift[64] = {
			0x0000000000000032,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000032,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000035,
			0x0000000000000033,
			0x0000000000000032,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000033,
			0x0000000000000032,

		};
		constexpr std::uint64_t rooktFlatternedIndices[64] = {
			0x0000000000000000,
			0x0000000000004000,
			0x0000000000006000,
			0x0000000000008000,
			0x000000000000a000,
			0x000000000000c000,
			0x000000000000e000,
			0x0000000000010000,
			0x0000000000014000,
			0x0000000000016000,
			0x0000000000016800,
			0x0000000000017000,
			0x0000000000017800,
			0x0000000000018000,
			0x0000000000018800,
			0x0000000000019000,
			0x000000000001b000,
			0x000000000001d000,
			0x000000000001d800,
			0x000000000001e000,
			0x000000000001e800,
			0x000000000001f000,
			0x000000000001f800,
			0x0000000000020000,
			0x0000000000022000,
			0x0000000000024000,
			0x0000000000024800,
			0x0000000000025000,
			0x0000000000025800,
			0x0000000000026000,
			0x0000000000026800,
			0x0000000000027000,
			0x0000000000029000,
			0x000000000002b000,
			0x000000000002b800,
			0x000000000002c000,
			0x000000000002c800,
			0x000000000002d000,
			0x000000000002d800,
			0x000000000002e000,
			0x0000000000030000,
			0x0000000000032000,
			0x0000000000032800,
			0x0000000000033000,
			0x0000000000033800,
			0x0000000000034000,
			0x0000000000034800,
			0x0000000000035000,
			0x0000000000037000,
			0x0000000000039000,
			0x0000000000039800,
			0x000000000003a000,
			0x000000000003a800,
			0x000000000003b000,
			0x000000000003b800,
			0x000000000003c000,
			0x000000000003e000,
			0x0000000000042000,
			0x0000000000044000,
			0x0000000000046000,
			0x0000000000048000,
			0x000000000004a000,
			0x000000000004c000,
			0x000000000004e000
		};


		constexpr std::uint64_t bishoptMagicNumbers[64] = {
			0x65666a40fba6fc7f,
			0x458a0b40d1b89f8d,
			0x42452ee782c77442,
			0x74ae76b06293b0bf,
			0x914f5201c94b108e,
			0xa85671a6cc09418c,
			0xd3bdfda321b49cbd,
			0xdf28cf973cfe7f5b,
			0xf57da376a11ccecc,
			0x389bd8af5b47d7a7,
			0x5325580aa00bb95a,
			0xaaf41feb7f95995c,
			0x70f0cd39e6ff827c,
			0xd6c80a2fb01b69e3,
			0x59d343feb814e428,
			0x5c4e933e7e876926,
			0x72fde87ab156ab6b,
			0xa40b15f01a961c9b,
			0x5d8085fe43a46812,
			0x0106340401673ff4,
			0x1668c69a3989fffc,
			0x2e2ac023254ae020,
			0x0caedfca2d9c04b1,
			0x37118b789fc85a54,
			0x5135254a6759566a,
			0xca3726fe5611c193,
			0x4853e860a04abeb6,
			0xc3ffc5c000bfd24c,
			0x6be9ffee371c0ffe,
			0x7d23285ff30959ae,
			0x6936da4b7540afaa,
			0x949102d8c3172531,
			0x2cd28092ff8ab5a3,
			0x6803181f2026f606,
			0x292fe39417f6696b,
			0x7a56e00f980347df,
			0x9740b954ffffd314,
			0x6b1740afbff9ee1f,
			0xf09dd9e858805c4e,
			0xe704db0b28d5b789,
			0xebf632df8b50a897,
			0xdae9b531f008c7b0,
			0xb412c9c7fb33605b,
			0xf720134639dd2916,
			0xccffe69802520439,
			0x0da061fe1e6ff9d2,
			0x249d2de137501307,
			0xbabaf75d5b766513,
			0xeac4600672e35485,
			0xa02cc192fc1d7c3b,
			0xb4319b1654985e16,
			0x1c840045e7b489f8,
			0x2417bfdb4057de3c,
			0xdfc5ea8ab65100a2,
			0x067fd03001075fe7,
			0x9cd64a8ac186b2cf,
			0xdad7f7dccc498d2b,
			0x751ac2d7fc7e17ae,
			0x354cec6183447670,
			0x0db4a38a8b8de0ff,
			0xb0ac019f445195a7,
			0xf909e1b6f6006cff,
			0x4e1c025ef5e2e742,
			0x82017f38e504b0a4
		};
		
		constexpr std::uint64_t bishopMagicKeyShift[64] = {
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003c,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003c,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a,
			0x0000000000000039,
			0x0000000000000039,
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x0000000000000039,
			0x0000000000000038,
			0x0000000000000038,
			0x0000000000000039,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x0000000000000039,
			0x0000000000000038,
			0x0000000000000038,
			0x0000000000000039,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a,
			0x0000000000000039,
			0x0000000000000039,
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003c,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003c,
			0x000000000000003b,
			0x000000000000003a,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003b,
			0x000000000000003a
		};
		
		constexpr std::uint64_t bishopFlatternedIndices[64] = {
			0x0000000000000000,
			0x0000000000000040,
			0x0000000000000060,
			0x0000000000000080,
			0x00000000000000a0,
			0x00000000000000c0,
			0x00000000000000e0,
			0x0000000000000100,
			0x0000000000000140,
			0x0000000000000160,
			0x0000000000000170,
			0x0000000000000190,
			0x00000000000001b0,
			0x00000000000001d0,
			0x00000000000001f0,
			0x0000000000000200,
			0x0000000000000220,
			0x0000000000000240,
			0x0000000000000260,
			0x00000000000002a0,
			0x0000000000000320,
			0x00000000000003a0,
			0x00000000000003e0,
			0x0000000000000400,
			0x0000000000000420,
			0x0000000000000440,
			0x0000000000000460,
			0x00000000000004e0,
			0x00000000000005e0,
			0x00000000000006e0,
			0x0000000000000760,
			0x0000000000000780,
			0x00000000000007a0,
			0x00000000000007c0,
			0x00000000000007e0,
			0x0000000000000860,
			0x0000000000000960,
			0x0000000000000a60,
			0x0000000000000ae0,
			0x0000000000000b00,
			0x0000000000000b20,
			0x0000000000000b40,
			0x0000000000000b60,
			0x0000000000000ba0,
			0x0000000000000c20,
			0x0000000000000ca0,
			0x0000000000000ce0,
			0x0000000000000d00,
			0x0000000000000d20,
			0x0000000000000d40,
			0x0000000000000d50,
			0x0000000000000d70,
			0x0000000000000d90,
			0x0000000000000db0,
			0x0000000000000dd0,
			0x0000000000000de0,
			0x0000000000000e00,
			0x0000000000000e40,
			0x0000000000000e60,
			0x0000000000000e80,
			0x0000000000000ea0,
			0x0000000000000ec0,
			0x0000000000000ee0,
			0x0000000000000f00,

		};
	}

}